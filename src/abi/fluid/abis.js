const fluidVaultResolverAbi = [{ inputs: [{ internalType: "address", name: "factory_", type: "address" }, { internalType: "address", name: "liquidityResolver_", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { inputs: [], name: "FACTORY", outputs: [{ internalType: "contract IFluidVaultFactory", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "LIQUIDITY_RESOLVER", outputs: [{ internalType: "contract IFluidLiquidityResolver", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "slot_", type: "uint256" }, { internalType: "int256", name: "key1_", type: "int256" }, { internalType: "uint256", name: "key2_", type: "uint256" }], name: "calculateDoubleIntUintMapping", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "slot_", type: "uint256" }, { internalType: "int256", name: "key_", type: "int256" }], name: "calculateStorageSlotIntMapping", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "slot_", type: "uint256" }, { internalType: "uint256", name: "key_", type: "uint256" }], name: "calculateStorageSlotUintMapping", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getAbsorbedDustDebt", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getAbsorbedLiquidityRaw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getAllVaultsAddresses", outputs: [{ internalType: "address[]", name: "vaults_", type: "address[]" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getAllVaultsLiquidation", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "address", name: "token0In", type: "address" }, { internalType: "address", name: "token0Out", type: "address" }, { internalType: "address", name: "token1In", type: "address" }, { internalType: "address", name: "token1Out", type: "address" }, { internalType: "uint256", name: "inAmt", type: "uint256" }, { internalType: "uint256", name: "outAmt", type: "uint256" }, { internalType: "uint256", name: "inAmtWithAbsorb", type: "uint256" }, { internalType: "uint256", name: "outAmtWithAbsorb", type: "uint256" }, { internalType: "bool", name: "absorbAvailable", type: "bool" }], internalType: "struct Structs.LiquidationStruct[]", name: "liquidationsData_", type: "tuple[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }, { internalType: "uint256", name: "branch_", type: "uint256" }], name: "getBranchDataRaw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }, { internalType: "uint256", name: "index_", type: "uint256" }], name: "getContractForDeployerIndex", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getDexFromAddress", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "vaults_", type: "address[]" }, { internalType: "uint256[]", name: "tokensInAmt_", type: "uint256[]" }], name: "getMultipleVaultsLiquidation", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "address", name: "token0In", type: "address" }, { internalType: "address", name: "token0Out", type: "address" }, { internalType: "address", name: "token1In", type: "address" }, { internalType: "address", name: "token1Out", type: "address" }, { internalType: "uint256", name: "inAmt", type: "uint256" }, { internalType: "uint256", name: "outAmt", type: "uint256" }, { internalType: "uint256", name: "inAmtWithAbsorb", type: "uint256" }, { internalType: "uint256", name: "outAmtWithAbsorb", type: "uint256" }, { internalType: "bool", name: "absorbAvailable", type: "bool" }], internalType: "struct Structs.LiquidationStruct[]", name: "liquidationsData_", type: "tuple[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }, { internalType: "uint256", name: "positionId_", type: "uint256" }], name: "getPositionDataRaw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getRateRaw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getRebalancer", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }, { internalType: "int256", name: "tick_", type: "int256" }], name: "getTickDataRaw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }, { internalType: "int256", name: "key_", type: "int256" }], name: "getTickHasDebtRaw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }, { internalType: "int256", name: "tick_", type: "int256" }, { internalType: "uint256", name: "id_", type: "uint256" }], name: "getTickIdDataRaw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "nftId_", type: "uint256" }], name: "getTokenConfig", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getTotalVaults", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getVaultAbsorb", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "bool", name: "absorbAvailable", type: "bool" }], internalType: "struct Structs.AbsorbStruct", name: "absorbData_", type: "tuple" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "vaultId_", type: "uint256" }], name: "getVaultAddress", outputs: [{ internalType: "address", name: "vault_", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getVaultEntireData", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "bool", name: "isSmartCol", type: "bool" }, { internalType: "bool", name: "isSmartDebt", type: "bool" }, { components: [{ internalType: "address", name: "liquidity", type: "address" }, { internalType: "address", name: "factory", type: "address" }, { internalType: "address", name: "operateImplementation", type: "address" }, { internalType: "address", name: "adminImplementation", type: "address" }, { internalType: "address", name: "secondaryImplementation", type: "address" }, { internalType: "address", name: "deployer", type: "address" }, { internalType: "address", name: "supply", type: "address" }, { internalType: "address", name: "borrow", type: "address" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "supplyToken", type: "tuple" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "borrowToken", type: "tuple" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "vaultType", type: "uint256" }, { internalType: "bytes32", name: "supplyExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "borrowExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "userSupplySlot", type: "bytes32" }, { internalType: "bytes32", name: "userBorrowSlot", type: "bytes32" }], internalType: "struct IFluidVault.ConstantViews", name: "constantVariables", type: "tuple" }, { components: [{ internalType: "uint16", name: "supplyRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "borrowRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "collateralFactor", type: "uint16" }, { internalType: "uint16", name: "liquidationThreshold", type: "uint16" }, { internalType: "uint16", name: "liquidationMaxLimit", type: "uint16" }, { internalType: "uint16", name: "withdrawalGap", type: "uint16" }, { internalType: "uint16", name: "liquidationPenalty", type: "uint16" }, { internalType: "uint16", name: "borrowFee", type: "uint16" }, { internalType: "address", name: "oracle", type: "address" }, { internalType: "uint256", name: "oraclePriceOperate", type: "uint256" }, { internalType: "uint256", name: "oraclePriceLiquidate", type: "uint256" }, { internalType: "address", name: "rebalancer", type: "address" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }], internalType: "struct Structs.Configs", name: "configs", type: "tuple" }, { components: [{ internalType: "uint256", name: "lastStoredLiquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredLiquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "supplyRateLiquidity", type: "uint256" }, { internalType: "uint256", name: "borrowRateLiquidity", type: "uint256" }, { internalType: "int256", name: "supplyRateVault", type: "int256" }, { internalType: "int256", name: "borrowRateVault", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateSupply", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateBorrow", type: "int256" }], internalType: "struct Structs.ExchangePricesAndRates", name: "exchangePricesAndRates", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalSupplyVault", type: "uint256" }, { internalType: "uint256", name: "totalBorrowVault", type: "uint256" }, { internalType: "uint256", name: "totalSupplyLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "totalBorrowLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "absorbedSupply", type: "uint256" }, { internalType: "uint256", name: "absorbedBorrow", type: "uint256" }], internalType: "struct Structs.TotalSupplyAndBorrow", name: "totalSupplyAndBorrow", type: "tuple" }, { components: [{ internalType: "uint256", name: "withdrawLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }, { internalType: "uint256", name: "minimumBorrowing", type: "uint256" }], internalType: "struct Structs.LimitsAndAvailability", name: "limitsAndAvailability", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "int256", name: "topTick", type: "int256" }, { internalType: "uint256", name: "currentBranch", type: "uint256" }, { internalType: "uint256", name: "totalBranch", type: "uint256" }, { internalType: "uint256", name: "totalBorrow", type: "uint256" }, { internalType: "uint256", name: "totalSupply", type: "uint256" }, { components: [{ internalType: "uint256", name: "status", type: "uint256" }, { internalType: "int256", name: "minimaTick", type: "int256" }, { internalType: "uint256", name: "debtFactor", type: "uint256" }, { internalType: "uint256", name: "partials", type: "uint256" }, { internalType: "uint256", name: "debtLiquidity", type: "uint256" }, { internalType: "uint256", name: "baseBranchId", type: "uint256" }, { internalType: "int256", name: "baseBranchMinima", type: "int256" }], internalType: "struct Structs.CurrentBranchState", name: "currentBranchState", type: "tuple" }], internalType: "struct Structs.VaultState", name: "vaultState", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "withdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseWithdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }], internalType: "struct Structs.UserSupplyData", name: "liquidityUserSupplyData", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "maxBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }], internalType: "struct Structs.UserBorrowData", name: "liquidityUserBorrowData", type: "tuple" }], internalType: "struct Structs.VaultEntireData", name: "vaultData_", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getVaultId", outputs: [{ internalType: "uint256", name: "id_", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }, { internalType: "uint256", name: "tokenInAmt_", type: "uint256" }], name: "getVaultLiquidation", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "address", name: "token0In", type: "address" }, { internalType: "address", name: "token0Out", type: "address" }, { internalType: "address", name: "token1In", type: "address" }, { internalType: "address", name: "token1Out", type: "address" }, { internalType: "uint256", name: "inAmt", type: "uint256" }, { internalType: "uint256", name: "outAmt", type: "uint256" }, { internalType: "uint256", name: "inAmtWithAbsorb", type: "uint256" }, { internalType: "uint256", name: "outAmtWithAbsorb", type: "uint256" }, { internalType: "bool", name: "absorbAvailable", type: "bool" }], internalType: "struct Structs.LiquidationStruct", name: "liquidationData_", type: "tuple" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getVaultState", outputs: [{ components: [{ internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "int256", name: "topTick", type: "int256" }, { internalType: "uint256", name: "currentBranch", type: "uint256" }, { internalType: "uint256", name: "totalBranch", type: "uint256" }, { internalType: "uint256", name: "totalBorrow", type: "uint256" }, { internalType: "uint256", name: "totalSupply", type: "uint256" }, { components: [{ internalType: "uint256", name: "status", type: "uint256" }, { internalType: "int256", name: "minimaTick", type: "int256" }, { internalType: "uint256", name: "debtFactor", type: "uint256" }, { internalType: "uint256", name: "partials", type: "uint256" }, { internalType: "uint256", name: "debtLiquidity", type: "uint256" }, { internalType: "uint256", name: "baseBranchId", type: "uint256" }, { internalType: "int256", name: "baseBranchMinima", type: "int256" }], internalType: "struct Structs.CurrentBranchState", name: "currentBranchState", type: "tuple" }], internalType: "struct Structs.VaultState", name: "vaultState_", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getVaultType", outputs: [{ internalType: "uint256", name: "vaultType_", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getVaultVariables2Raw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "vault_", type: "address" }], name: "getVaultVariablesRaw", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getVaultsAbsorb", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "bool", name: "absorbAvailable", type: "bool" }], internalType: "struct Structs.AbsorbStruct[]", name: "absorbData_", type: "tuple[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address[]", name: "vaults_", type: "address[]" }], name: "getVaultsAbsorb", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "bool", name: "absorbAvailable", type: "bool" }], internalType: "struct Structs.AbsorbStruct[]", name: "absorbData_", type: "tuple[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address[]", name: "vaults_", type: "address[]" }], name: "getVaultsEntireData", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "bool", name: "isSmartCol", type: "bool" }, { internalType: "bool", name: "isSmartDebt", type: "bool" }, { components: [{ internalType: "address", name: "liquidity", type: "address" }, { internalType: "address", name: "factory", type: "address" }, { internalType: "address", name: "operateImplementation", type: "address" }, { internalType: "address", name: "adminImplementation", type: "address" }, { internalType: "address", name: "secondaryImplementation", type: "address" }, { internalType: "address", name: "deployer", type: "address" }, { internalType: "address", name: "supply", type: "address" }, { internalType: "address", name: "borrow", type: "address" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "supplyToken", type: "tuple" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "borrowToken", type: "tuple" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "vaultType", type: "uint256" }, { internalType: "bytes32", name: "supplyExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "borrowExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "userSupplySlot", type: "bytes32" }, { internalType: "bytes32", name: "userBorrowSlot", type: "bytes32" }], internalType: "struct IFluidVault.ConstantViews", name: "constantVariables", type: "tuple" }, { components: [{ internalType: "uint16", name: "supplyRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "borrowRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "collateralFactor", type: "uint16" }, { internalType: "uint16", name: "liquidationThreshold", type: "uint16" }, { internalType: "uint16", name: "liquidationMaxLimit", type: "uint16" }, { internalType: "uint16", name: "withdrawalGap", type: "uint16" }, { internalType: "uint16", name: "liquidationPenalty", type: "uint16" }, { internalType: "uint16", name: "borrowFee", type: "uint16" }, { internalType: "address", name: "oracle", type: "address" }, { internalType: "uint256", name: "oraclePriceOperate", type: "uint256" }, { internalType: "uint256", name: "oraclePriceLiquidate", type: "uint256" }, { internalType: "address", name: "rebalancer", type: "address" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }], internalType: "struct Structs.Configs", name: "configs", type: "tuple" }, { components: [{ internalType: "uint256", name: "lastStoredLiquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredLiquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "supplyRateLiquidity", type: "uint256" }, { internalType: "uint256", name: "borrowRateLiquidity", type: "uint256" }, { internalType: "int256", name: "supplyRateVault", type: "int256" }, { internalType: "int256", name: "borrowRateVault", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateSupply", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateBorrow", type: "int256" }], internalType: "struct Structs.ExchangePricesAndRates", name: "exchangePricesAndRates", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalSupplyVault", type: "uint256" }, { internalType: "uint256", name: "totalBorrowVault", type: "uint256" }, { internalType: "uint256", name: "totalSupplyLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "totalBorrowLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "absorbedSupply", type: "uint256" }, { internalType: "uint256", name: "absorbedBorrow", type: "uint256" }], internalType: "struct Structs.TotalSupplyAndBorrow", name: "totalSupplyAndBorrow", type: "tuple" }, { components: [{ internalType: "uint256", name: "withdrawLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }, { internalType: "uint256", name: "minimumBorrowing", type: "uint256" }], internalType: "struct Structs.LimitsAndAvailability", name: "limitsAndAvailability", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "int256", name: "topTick", type: "int256" }, { internalType: "uint256", name: "currentBranch", type: "uint256" }, { internalType: "uint256", name: "totalBranch", type: "uint256" }, { internalType: "uint256", name: "totalBorrow", type: "uint256" }, { internalType: "uint256", name: "totalSupply", type: "uint256" }, { components: [{ internalType: "uint256", name: "status", type: "uint256" }, { internalType: "int256", name: "minimaTick", type: "int256" }, { internalType: "uint256", name: "debtFactor", type: "uint256" }, { internalType: "uint256", name: "partials", type: "uint256" }, { internalType: "uint256", name: "debtLiquidity", type: "uint256" }, { internalType: "uint256", name: "baseBranchId", type: "uint256" }, { internalType: "int256", name: "baseBranchMinima", type: "int256" }], internalType: "struct Structs.CurrentBranchState", name: "currentBranchState", type: "tuple" }], internalType: "struct Structs.VaultState", name: "vaultState", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "withdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseWithdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }], internalType: "struct Structs.UserSupplyData", name: "liquidityUserSupplyData", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "maxBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }], internalType: "struct Structs.UserBorrowData", name: "liquidityUserBorrowData", type: "tuple" }], internalType: "struct Structs.VaultEntireData[]", name: "vaultsData_", type: "tuple[]" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getVaultsEntireData", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "bool", name: "isSmartCol", type: "bool" }, { internalType: "bool", name: "isSmartDebt", type: "bool" }, { components: [{ internalType: "address", name: "liquidity", type: "address" }, { internalType: "address", name: "factory", type: "address" }, { internalType: "address", name: "operateImplementation", type: "address" }, { internalType: "address", name: "adminImplementation", type: "address" }, { internalType: "address", name: "secondaryImplementation", type: "address" }, { internalType: "address", name: "deployer", type: "address" }, { internalType: "address", name: "supply", type: "address" }, { internalType: "address", name: "borrow", type: "address" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "supplyToken", type: "tuple" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "borrowToken", type: "tuple" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "vaultType", type: "uint256" }, { internalType: "bytes32", name: "supplyExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "borrowExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "userSupplySlot", type: "bytes32" }, { internalType: "bytes32", name: "userBorrowSlot", type: "bytes32" }], internalType: "struct IFluidVault.ConstantViews", name: "constantVariables", type: "tuple" }, { components: [{ internalType: "uint16", name: "supplyRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "borrowRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "collateralFactor", type: "uint16" }, { internalType: "uint16", name: "liquidationThreshold", type: "uint16" }, { internalType: "uint16", name: "liquidationMaxLimit", type: "uint16" }, { internalType: "uint16", name: "withdrawalGap", type: "uint16" }, { internalType: "uint16", name: "liquidationPenalty", type: "uint16" }, { internalType: "uint16", name: "borrowFee", type: "uint16" }, { internalType: "address", name: "oracle", type: "address" }, { internalType: "uint256", name: "oraclePriceOperate", type: "uint256" }, { internalType: "uint256", name: "oraclePriceLiquidate", type: "uint256" }, { internalType: "address", name: "rebalancer", type: "address" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }], internalType: "struct Structs.Configs", name: "configs", type: "tuple" }, { components: [{ internalType: "uint256", name: "lastStoredLiquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredLiquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "supplyRateLiquidity", type: "uint256" }, { internalType: "uint256", name: "borrowRateLiquidity", type: "uint256" }, { internalType: "int256", name: "supplyRateVault", type: "int256" }, { internalType: "int256", name: "borrowRateVault", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateSupply", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateBorrow", type: "int256" }], internalType: "struct Structs.ExchangePricesAndRates", name: "exchangePricesAndRates", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalSupplyVault", type: "uint256" }, { internalType: "uint256", name: "totalBorrowVault", type: "uint256" }, { internalType: "uint256", name: "totalSupplyLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "totalBorrowLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "absorbedSupply", type: "uint256" }, { internalType: "uint256", name: "absorbedBorrow", type: "uint256" }], internalType: "struct Structs.TotalSupplyAndBorrow", name: "totalSupplyAndBorrow", type: "tuple" }, { components: [{ internalType: "uint256", name: "withdrawLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }, { internalType: "uint256", name: "minimumBorrowing", type: "uint256" }], internalType: "struct Structs.LimitsAndAvailability", name: "limitsAndAvailability", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "int256", name: "topTick", type: "int256" }, { internalType: "uint256", name: "currentBranch", type: "uint256" }, { internalType: "uint256", name: "totalBranch", type: "uint256" }, { internalType: "uint256", name: "totalBorrow", type: "uint256" }, { internalType: "uint256", name: "totalSupply", type: "uint256" }, { components: [{ internalType: "uint256", name: "status", type: "uint256" }, { internalType: "int256", name: "minimaTick", type: "int256" }, { internalType: "uint256", name: "debtFactor", type: "uint256" }, { internalType: "uint256", name: "partials", type: "uint256" }, { internalType: "uint256", name: "debtLiquidity", type: "uint256" }, { internalType: "uint256", name: "baseBranchId", type: "uint256" }, { internalType: "int256", name: "baseBranchMinima", type: "int256" }], internalType: "struct Structs.CurrentBranchState", name: "currentBranchState", type: "tuple" }], internalType: "struct Structs.VaultState", name: "vaultState", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "withdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseWithdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }], internalType: "struct Structs.UserSupplyData", name: "liquidityUserSupplyData", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "maxBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }], internalType: "struct Structs.UserBorrowData", name: "liquidityUserBorrowData", type: "tuple" }], internalType: "struct Structs.VaultEntireData[]", name: "vaultsData_", type: "tuple[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "slot_", type: "uint256" }], name: "normalSlot", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "nftId_", type: "uint256" }], name: "positionByNftId", outputs: [{ components: [{ internalType: "uint256", name: "nftId", type: "uint256" }, { internalType: "address", name: "owner", type: "address" }, { internalType: "bool", name: "isLiquidated", type: "bool" }, { internalType: "bool", name: "isSupplyPosition", type: "bool" }, { internalType: "int256", name: "tick", type: "int256" }, { internalType: "uint256", name: "tickId", type: "uint256" }, { internalType: "uint256", name: "beforeSupply", type: "uint256" }, { internalType: "uint256", name: "beforeBorrow", type: "uint256" }, { internalType: "uint256", name: "beforeDustBorrow", type: "uint256" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "uint256", name: "dustBorrow", type: "uint256" }], internalType: "struct Structs.UserPosition", name: "userPosition_", type: "tuple" }, { components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "bool", name: "isSmartCol", type: "bool" }, { internalType: "bool", name: "isSmartDebt", type: "bool" }, { components: [{ internalType: "address", name: "liquidity", type: "address" }, { internalType: "address", name: "factory", type: "address" }, { internalType: "address", name: "operateImplementation", type: "address" }, { internalType: "address", name: "adminImplementation", type: "address" }, { internalType: "address", name: "secondaryImplementation", type: "address" }, { internalType: "address", name: "deployer", type: "address" }, { internalType: "address", name: "supply", type: "address" }, { internalType: "address", name: "borrow", type: "address" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "supplyToken", type: "tuple" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "borrowToken", type: "tuple" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "vaultType", type: "uint256" }, { internalType: "bytes32", name: "supplyExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "borrowExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "userSupplySlot", type: "bytes32" }, { internalType: "bytes32", name: "userBorrowSlot", type: "bytes32" }], internalType: "struct IFluidVault.ConstantViews", name: "constantVariables", type: "tuple" }, { components: [{ internalType: "uint16", name: "supplyRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "borrowRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "collateralFactor", type: "uint16" }, { internalType: "uint16", name: "liquidationThreshold", type: "uint16" }, { internalType: "uint16", name: "liquidationMaxLimit", type: "uint16" }, { internalType: "uint16", name: "withdrawalGap", type: "uint16" }, { internalType: "uint16", name: "liquidationPenalty", type: "uint16" }, { internalType: "uint16", name: "borrowFee", type: "uint16" }, { internalType: "address", name: "oracle", type: "address" }, { internalType: "uint256", name: "oraclePriceOperate", type: "uint256" }, { internalType: "uint256", name: "oraclePriceLiquidate", type: "uint256" }, { internalType: "address", name: "rebalancer", type: "address" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }], internalType: "struct Structs.Configs", name: "configs", type: "tuple" }, { components: [{ internalType: "uint256", name: "lastStoredLiquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredLiquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "supplyRateLiquidity", type: "uint256" }, { internalType: "uint256", name: "borrowRateLiquidity", type: "uint256" }, { internalType: "int256", name: "supplyRateVault", type: "int256" }, { internalType: "int256", name: "borrowRateVault", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateSupply", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateBorrow", type: "int256" }], internalType: "struct Structs.ExchangePricesAndRates", name: "exchangePricesAndRates", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalSupplyVault", type: "uint256" }, { internalType: "uint256", name: "totalBorrowVault", type: "uint256" }, { internalType: "uint256", name: "totalSupplyLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "totalBorrowLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "absorbedSupply", type: "uint256" }, { internalType: "uint256", name: "absorbedBorrow", type: "uint256" }], internalType: "struct Structs.TotalSupplyAndBorrow", name: "totalSupplyAndBorrow", type: "tuple" }, { components: [{ internalType: "uint256", name: "withdrawLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }, { internalType: "uint256", name: "minimumBorrowing", type: "uint256" }], internalType: "struct Structs.LimitsAndAvailability", name: "limitsAndAvailability", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "int256", name: "topTick", type: "int256" }, { internalType: "uint256", name: "currentBranch", type: "uint256" }, { internalType: "uint256", name: "totalBranch", type: "uint256" }, { internalType: "uint256", name: "totalBorrow", type: "uint256" }, { internalType: "uint256", name: "totalSupply", type: "uint256" }, { components: [{ internalType: "uint256", name: "status", type: "uint256" }, { internalType: "int256", name: "minimaTick", type: "int256" }, { internalType: "uint256", name: "debtFactor", type: "uint256" }, { internalType: "uint256", name: "partials", type: "uint256" }, { internalType: "uint256", name: "debtLiquidity", type: "uint256" }, { internalType: "uint256", name: "baseBranchId", type: "uint256" }, { internalType: "int256", name: "baseBranchMinima", type: "int256" }], internalType: "struct Structs.CurrentBranchState", name: "currentBranchState", type: "tuple" }], internalType: "struct Structs.VaultState", name: "vaultState", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "withdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseWithdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }], internalType: "struct Structs.UserSupplyData", name: "liquidityUserSupplyData", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "maxBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }], internalType: "struct Structs.UserBorrowData", name: "liquidityUserBorrowData", type: "tuple" }], internalType: "struct Structs.VaultEntireData", name: "vaultData_", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "user_", type: "address" }], name: "positionsByUser", outputs: [{ components: [{ internalType: "uint256", name: "nftId", type: "uint256" }, { internalType: "address", name: "owner", type: "address" }, { internalType: "bool", name: "isLiquidated", type: "bool" }, { internalType: "bool", name: "isSupplyPosition", type: "bool" }, { internalType: "int256", name: "tick", type: "int256" }, { internalType: "uint256", name: "tickId", type: "uint256" }, { internalType: "uint256", name: "beforeSupply", type: "uint256" }, { internalType: "uint256", name: "beforeBorrow", type: "uint256" }, { internalType: "uint256", name: "beforeDustBorrow", type: "uint256" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "uint256", name: "dustBorrow", type: "uint256" }], internalType: "struct Structs.UserPosition[]", name: "userPositions_", type: "tuple[]" }, { components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "bool", name: "isSmartCol", type: "bool" }, { internalType: "bool", name: "isSmartDebt", type: "bool" }, { components: [{ internalType: "address", name: "liquidity", type: "address" }, { internalType: "address", name: "factory", type: "address" }, { internalType: "address", name: "operateImplementation", type: "address" }, { internalType: "address", name: "adminImplementation", type: "address" }, { internalType: "address", name: "secondaryImplementation", type: "address" }, { internalType: "address", name: "deployer", type: "address" }, { internalType: "address", name: "supply", type: "address" }, { internalType: "address", name: "borrow", type: "address" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "supplyToken", type: "tuple" }, { components: [{ internalType: "address", name: "token0", type: "address" }, { internalType: "address", name: "token1", type: "address" }], internalType: "struct IFluidVault.Tokens", name: "borrowToken", type: "tuple" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "vaultType", type: "uint256" }, { internalType: "bytes32", name: "supplyExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "borrowExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "userSupplySlot", type: "bytes32" }, { internalType: "bytes32", name: "userBorrowSlot", type: "bytes32" }], internalType: "struct IFluidVault.ConstantViews", name: "constantVariables", type: "tuple" }, { components: [{ internalType: "uint16", name: "supplyRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "borrowRateMagnifier", type: "uint16" }, { internalType: "uint16", name: "collateralFactor", type: "uint16" }, { internalType: "uint16", name: "liquidationThreshold", type: "uint16" }, { internalType: "uint16", name: "liquidationMaxLimit", type: "uint16" }, { internalType: "uint16", name: "withdrawalGap", type: "uint16" }, { internalType: "uint16", name: "liquidationPenalty", type: "uint16" }, { internalType: "uint16", name: "borrowFee", type: "uint16" }, { internalType: "address", name: "oracle", type: "address" }, { internalType: "uint256", name: "oraclePriceOperate", type: "uint256" }, { internalType: "uint256", name: "oraclePriceLiquidate", type: "uint256" }, { internalType: "address", name: "rebalancer", type: "address" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }], internalType: "struct Structs.Configs", name: "configs", type: "tuple" }, { components: [{ internalType: "uint256", name: "lastStoredLiquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredLiquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "lastStoredVaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquiditySupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "liquidityBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExchangePrice", type: "uint256" }, { internalType: "uint256", name: "supplyRateLiquidity", type: "uint256" }, { internalType: "uint256", name: "borrowRateLiquidity", type: "uint256" }, { internalType: "int256", name: "supplyRateVault", type: "int256" }, { internalType: "int256", name: "borrowRateVault", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateSupply", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateBorrow", type: "int256" }], internalType: "struct Structs.ExchangePricesAndRates", name: "exchangePricesAndRates", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalSupplyVault", type: "uint256" }, { internalType: "uint256", name: "totalBorrowVault", type: "uint256" }, { internalType: "uint256", name: "totalSupplyLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "totalBorrowLiquidityOrDex", type: "uint256" }, { internalType: "uint256", name: "absorbedSupply", type: "uint256" }, { internalType: "uint256", name: "absorbedBorrow", type: "uint256" }], internalType: "struct Structs.TotalSupplyAndBorrow", name: "totalSupplyAndBorrow", type: "tuple" }, { components: [{ internalType: "uint256", name: "withdrawLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }, { internalType: "uint256", name: "minimumBorrowing", type: "uint256" }], internalType: "struct Structs.LimitsAndAvailability", name: "limitsAndAvailability", type: "tuple" }, { components: [{ internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "int256", name: "topTick", type: "int256" }, { internalType: "uint256", name: "currentBranch", type: "uint256" }, { internalType: "uint256", name: "totalBranch", type: "uint256" }, { internalType: "uint256", name: "totalBorrow", type: "uint256" }, { internalType: "uint256", name: "totalSupply", type: "uint256" }, { components: [{ internalType: "uint256", name: "status", type: "uint256" }, { internalType: "int256", name: "minimaTick", type: "int256" }, { internalType: "uint256", name: "debtFactor", type: "uint256" }, { internalType: "uint256", name: "partials", type: "uint256" }, { internalType: "uint256", name: "debtLiquidity", type: "uint256" }, { internalType: "uint256", name: "baseBranchId", type: "uint256" }, { internalType: "int256", name: "baseBranchMinima", type: "int256" }], internalType: "struct Structs.CurrentBranchState", name: "currentBranchState", type: "tuple" }], internalType: "struct Structs.VaultState", name: "vaultState", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "withdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseWithdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }], internalType: "struct Structs.UserSupplyData", name: "liquidityUserSupplyData", type: "tuple" }, { components: [{ internalType: "bool", name: "modeWithInterest", type: "bool" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "lastUpdateTimestamp", type: "uint256" }, { internalType: "uint256", name: "expandPercent", type: "uint256" }, { internalType: "uint256", name: "expandDuration", type: "uint256" }, { internalType: "uint256", name: "baseBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "maxBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }], internalType: "struct Structs.UserBorrowData", name: "liquidityUserBorrowData", type: "tuple" }], internalType: "struct Structs.VaultEntireData[]", name: "vaultsData_", type: "tuple[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "user_", type: "address" }], name: "positionsNftIdOfUser", outputs: [{ internalType: "uint256[]", name: "nftIds_", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tickRaw_", type: "uint256" }], name: "tickHelper", outputs: [{ internalType: "int256", name: "tick", type: "int256" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "totalPositions", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "nftId_", type: "uint256" }], name: "vaultByNftId", outputs: [{ internalType: "address", name: "vault_", type: "address" }], stateMutability: "view", type: "function" }];

const fluidVaultT1Abi = [{ inputs: [{ components: [{ internalType: "address", name: "liquidity", type: "address" }, { internalType: "address", name: "factory", type: "address" }, { internalType: "address", name: "adminImplementation", type: "address" }, { internalType: "address", name: "secondaryImplementation", type: "address" }, { internalType: "address", name: "supplyToken", type: "address" }, { internalType: "address", name: "borrowToken", type: "address" }, { internalType: "uint8", name: "supplyDecimals", type: "uint8" }, { internalType: "uint8", name: "borrowDecimals", type: "uint8" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "bytes32", name: "liquiditySupplyExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "liquidityBorrowExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "liquidityUserSupplySlot", type: "bytes32" }, { internalType: "bytes32", name: "liquidityUserBorrowSlot", type: "bytes32" }], internalType: "struct Structs.ConstantViews", name: "constants_", type: "tuple" }], stateMutability: "nonpayable", type: "constructor" }, { inputs: [{ internalType: "uint256", name: "colLiquidated", type: "uint256" }, { internalType: "uint256", name: "debtLiquidated", type: "uint256" }], name: "FluidLiquidateResult", type: "error" }, { inputs: [{ internalType: "uint256", name: "errorId_", type: "uint256" }], name: "FluidLiquidityCalcsError", type: "error" }, { inputs: [{ internalType: "uint256", name: "errorId_", type: "uint256" }], name: "FluidSafeTransferError", type: "error" }, { inputs: [{ internalType: "uint256", name: "errorId_", type: "uint256" }], name: "FluidVaultError", type: "error" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "colAbsorbedRaw_", type: "uint256" }, { indexed: false, internalType: "uint256", name: "debtAbsorbedRaw_", type: "uint256" }], name: "LogAbsorb", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "liquidator_", type: "address" }, { indexed: false, internalType: "uint256", name: "colAmt_", type: "uint256" }, { indexed: false, internalType: "uint256", name: "debtAmt_", type: "uint256" }, { indexed: false, internalType: "address", name: "to_", type: "address" }], name: "LogLiquidate", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "user_", type: "address" }, { indexed: false, internalType: "uint256", name: "nftId_", type: "uint256" }, { indexed: false, internalType: "int256", name: "colAmt_", type: "int256" }, { indexed: false, internalType: "int256", name: "debtAmt_", type: "int256" }, { indexed: false, internalType: "address", name: "to_", type: "address" }], name: "LogOperate", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "int256", name: "colAmt_", type: "int256" }, { indexed: false, internalType: "int256", name: "debtAmt_", type: "int256" }], name: "LogRebalance", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "supplyExPrice_", type: "uint256" }, { indexed: false, internalType: "uint256", name: "borrowExPrice_", type: "uint256" }], name: "LogUpdateExchangePrice", type: "event" }, { stateMutability: "nonpayable", type: "fallback" }, { inputs: [], name: "LIQUIDITY", outputs: [{ internalType: "contract IFluidLiquidity", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "VAULT_FACTORY", outputs: [{ internalType: "contract IFluidVaultFactory", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "VAULT_ID", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "constantsView", outputs: [{ components: [{ internalType: "address", name: "liquidity", type: "address" }, { internalType: "address", name: "factory", type: "address" }, { internalType: "address", name: "adminImplementation", type: "address" }, { internalType: "address", name: "secondaryImplementation", type: "address" }, { internalType: "address", name: "supplyToken", type: "address" }, { internalType: "address", name: "borrowToken", type: "address" }, { internalType: "uint8", name: "supplyDecimals", type: "uint8" }, { internalType: "uint8", name: "borrowDecimals", type: "uint8" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "bytes32", name: "liquiditySupplyExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "liquidityBorrowExchangePriceSlot", type: "bytes32" }, { internalType: "bytes32", name: "liquidityUserSupplySlot", type: "bytes32" }, { internalType: "bytes32", name: "liquidityUserBorrowSlot", type: "bytes32" }], internalType: "struct Structs.ConstantViews", name: "constantsView_", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "int256", name: "positionTick_", type: "int256" }, { internalType: "uint256", name: "positionTickId_", type: "uint256" }, { internalType: "uint256", name: "positionRawDebt_", type: "uint256" }, { internalType: "uint256", name: "tickData_", type: "uint256" }], name: "fetchLatestPosition", outputs: [{ internalType: "int256", name: "", type: "int256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "positionRawCol_", type: "uint256" }, { internalType: "uint256", name: "branchId_", type: "uint256" }, { internalType: "uint256", name: "branchData_", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "debtAmt_", type: "uint256" }, { internalType: "uint256", name: "colPerUnitDebt_", type: "uint256" }, { internalType: "address", name: "to_", type: "address" }, { internalType: "bool", name: "absorb_", type: "bool" }], name: "liquidate", outputs: [{ internalType: "uint256", name: "actualDebtAmt_", type: "uint256" }, { internalType: "uint256", name: "actualColAmt_", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "token_", type: "address" }, { internalType: "uint256", name: "amount_", type: "uint256" }, { internalType: "bytes", name: "data_", type: "bytes" }], name: "liquidityCallback", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "nftId_", type: "uint256" }, { internalType: "int256", name: "newCol_", type: "int256" }, { internalType: "int256", name: "newDebt_", type: "int256" }, { internalType: "address", name: "to_", type: "address" }], name: "operate", outputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "int256", name: "", type: "int256" }, { internalType: "int256", name: "", type: "int256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "slot_", type: "bytes32" }], name: "readFromStorage", outputs: [{ internalType: "uint256", name: "result_", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "rebalance", outputs: [{ internalType: "int256", name: "supplyAmt_", type: "int256" }, { internalType: "int256", name: "borrowAmt_", type: "int256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "uint256", name: "vaultVariables2_", type: "uint256" }], name: "updateExchangePrices", outputs: [{ internalType: "uint256", name: "liqSupplyExPrice_", type: "uint256" }, { internalType: "uint256", name: "liqBorrowExPrice_", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExPrice_", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExPrice_", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "updateExchangePricesOnStorage", outputs: [{ internalType: "uint256", name: "liqSupplyExPrice_", type: "uint256" }, { internalType: "uint256", name: "liqBorrowExPrice_", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExPrice_", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExPrice_", type: "uint256" }], stateMutability: "nonpayable", type: "function" }];

const fluidViewAbi = [{ inputs: [], name: "feedRegistry", outputs: [{ internalType: "contract IFeedRegistry", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_tokenAddr", type: "address" }], name: "getAaveTokenPriceInETH", outputs: [{ internalType: "uint256", name: "price", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_tokenAddr", type: "address" }], name: "getAaveTokenPriceInUSD", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_tokenAddr", type: "address" }], name: "getAaveV3TokenPriceInETH", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_tokenAddr", type: "address" }], name: "getAaveV3TokenPriceInUSD", outputs: [{ internalType: "uint256", name: "price", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_inputTokenAddr", type: "address" }], name: "getAddrForChainlinkOracle", outputs: [{ internalType: "address", name: "tokenAddrForChainlinkUsage", type: "address" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "address", name: "_inputTokenAddr", type: "address" }], name: "getChainlinkPriceInETH", outputs: [{ internalType: "int256", name: "chainlinkPriceInETH", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_inputTokenAddr", type: "address" }, { internalType: "bool", name: "_useFallback", type: "bool" }], name: "getChainlinkPriceInUSD", outputs: [{ internalType: "int256", name: "chainlinkPriceInUSD", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_nftId", type: "uint256" }], name: "getPositionByNftId", outputs: [{ components: [{ internalType: "uint256", name: "nftId", type: "uint256" }, { internalType: "address", name: "owner", type: "address" }, { internalType: "bool", name: "isLiquidated", type: "bool" }, { internalType: "bool", name: "isSupplyPosition", type: "bool" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "int256", name: "tick", type: "int256" }, { internalType: "uint256", name: "tickId", type: "uint256" }], internalType: "struct FluidView.UserPosition", name: "position", type: "tuple" }, { components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "vaultType", type: "uint256" }, { internalType: "bool", name: "isSmartColl", type: "bool" }, { internalType: "bool", name: "isSmartDebt", type: "bool" }, { internalType: "address", name: "supplyToken0", type: "address" }, { internalType: "address", name: "supplyToken1", type: "address" }, { internalType: "address", name: "borrowToken0", type: "address" }, { internalType: "address", name: "borrowToken1", type: "address" }, { internalType: "uint256", name: "supplyToken0Decimals", type: "uint256" }, { internalType: "uint256", name: "supplyToken1Decimals", type: "uint256" }, { internalType: "uint256", name: "borrowToken0Decimals", type: "uint256" }, { internalType: "uint256", name: "borrowToken1Decimals", type: "uint256" }, { internalType: "uint16", name: "collateralFactor", type: "uint16" }, { internalType: "uint16", name: "liquidationThreshold", type: "uint16" }, { internalType: "uint16", name: "liquidationMaxLimit", type: "uint16" }, { internalType: "uint16", name: "withdrawalGap", type: "uint16" }, { internalType: "uint16", name: "liquidationPenalty", type: "uint16" }, { internalType: "uint16", name: "borrowFee", type: "uint16" }, { internalType: "address", name: "oracle", type: "address" }, { internalType: "uint256", name: "oraclePriceOperate", type: "uint256" }, { internalType: "uint256", name: "oraclePriceLiquidate", type: "uint256" }, { internalType: "uint256", name: "priceOfSupplyToken0InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfSupplyToken1InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfBorrowToken0InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfBorrowToken1InUSD", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExchangePrice", type: "uint256" }, { internalType: "int256", name: "supplyRateVault", type: "int256" }, { internalType: "int256", name: "borrowRateVault", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateSupply", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateBorrow", type: "int256" }, { internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "uint256", name: "totalSupplyVault", type: "uint256" }, { internalType: "uint256", name: "totalBorrowVault", type: "uint256" }, { internalType: "uint256", name: "withdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }, { internalType: "uint256", name: "baseWithdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawExpandPercent", type: "uint256" }, { internalType: "uint256", name: "withdrawExpandDuration", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }, { internalType: "uint256", name: "maxBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowExpandPercent", type: "uint256" }, { internalType: "uint256", name: "borrowExpandDuration", type: "uint256" }, { internalType: "uint256", name: "baseBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "minimumBorrowing", type: "uint256" }], internalType: "struct FluidView.VaultData", name: "vault", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_inputTokenAddr", type: "address" }], name: "getPriceInETH", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_inputTokenAddr", type: "address" }], name: "getPriceInUSD", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_inputTokenAddr", type: "address" }, { internalType: "uint80", name: "_roundId", type: "uint80" }, { internalType: "contract IAggregatorV3", name: "aggregator", type: "address" }], name: "getRoundInfo", outputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "updateTimestamp", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_inputTokenAddr", type: "address" }, { internalType: "uint80", name: "_roundId", type: "uint80" }], name: "getRoundInfo", outputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "updateTimestamp", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_tokenAddr", type: "address" }], name: "getSparkTokenPriceInETH", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_tokenAddr", type: "address" }], name: "getSparkTokenPriceInUSD", outputs: [{ internalType: "uint256", name: "price", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_user", type: "address" }], name: "getUserNftIds", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_user", type: "address" }], name: "getUserPositions", outputs: [{ components: [{ internalType: "uint256", name: "nftId", type: "uint256" }, { internalType: "address", name: "owner", type: "address" }, { internalType: "bool", name: "isLiquidated", type: "bool" }, { internalType: "bool", name: "isSupplyPosition", type: "bool" }, { internalType: "uint256", name: "supply", type: "uint256" }, { internalType: "uint256", name: "borrow", type: "uint256" }, { internalType: "int256", name: "tick", type: "int256" }, { internalType: "uint256", name: "tickId", type: "uint256" }], internalType: "struct FluidView.UserPosition[]", name: "positions", type: "tuple[]" }, { components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "vaultType", type: "uint256" }, { internalType: "bool", name: "isSmartColl", type: "bool" }, { internalType: "bool", name: "isSmartDebt", type: "bool" }, { internalType: "address", name: "supplyToken0", type: "address" }, { internalType: "address", name: "supplyToken1", type: "address" }, { internalType: "address", name: "borrowToken0", type: "address" }, { internalType: "address", name: "borrowToken1", type: "address" }, { internalType: "uint256", name: "supplyToken0Decimals", type: "uint256" }, { internalType: "uint256", name: "supplyToken1Decimals", type: "uint256" }, { internalType: "uint256", name: "borrowToken0Decimals", type: "uint256" }, { internalType: "uint256", name: "borrowToken1Decimals", type: "uint256" }, { internalType: "uint16", name: "collateralFactor", type: "uint16" }, { internalType: "uint16", name: "liquidationThreshold", type: "uint16" }, { internalType: "uint16", name: "liquidationMaxLimit", type: "uint16" }, { internalType: "uint16", name: "withdrawalGap", type: "uint16" }, { internalType: "uint16", name: "liquidationPenalty", type: "uint16" }, { internalType: "uint16", name: "borrowFee", type: "uint16" }, { internalType: "address", name: "oracle", type: "address" }, { internalType: "uint256", name: "oraclePriceOperate", type: "uint256" }, { internalType: "uint256", name: "oraclePriceLiquidate", type: "uint256" }, { internalType: "uint256", name: "priceOfSupplyToken0InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfSupplyToken1InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfBorrowToken0InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfBorrowToken1InUSD", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExchangePrice", type: "uint256" }, { internalType: "int256", name: "supplyRateVault", type: "int256" }, { internalType: "int256", name: "borrowRateVault", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateSupply", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateBorrow", type: "int256" }, { internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "uint256", name: "totalSupplyVault", type: "uint256" }, { internalType: "uint256", name: "totalBorrowVault", type: "uint256" }, { internalType: "uint256", name: "withdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }, { internalType: "uint256", name: "baseWithdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawExpandPercent", type: "uint256" }, { internalType: "uint256", name: "withdrawExpandDuration", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }, { internalType: "uint256", name: "maxBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowExpandPercent", type: "uint256" }, { internalType: "uint256", name: "borrowExpandDuration", type: "uint256" }, { internalType: "uint256", name: "baseBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "minimumBorrowing", type: "uint256" }], internalType: "struct FluidView.VaultData[]", name: "vaults", type: "tuple[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256[]", name: "_ids", type: "uint256[]" }, { internalType: "bool", name: "_fetchAll", type: "bool" }], name: "getVaultAddresses", outputs: [{ internalType: "address[]", name: "", type: "address[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_vault", type: "address" }], name: "getVaultData", outputs: [{ components: [{ internalType: "address", name: "vault", type: "address" }, { internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "vaultType", type: "uint256" }, { internalType: "bool", name: "isSmartColl", type: "bool" }, { internalType: "bool", name: "isSmartDebt", type: "bool" }, { internalType: "address", name: "supplyToken0", type: "address" }, { internalType: "address", name: "supplyToken1", type: "address" }, { internalType: "address", name: "borrowToken0", type: "address" }, { internalType: "address", name: "borrowToken1", type: "address" }, { internalType: "uint256", name: "supplyToken0Decimals", type: "uint256" }, { internalType: "uint256", name: "supplyToken1Decimals", type: "uint256" }, { internalType: "uint256", name: "borrowToken0Decimals", type: "uint256" }, { internalType: "uint256", name: "borrowToken1Decimals", type: "uint256" }, { internalType: "uint16", name: "collateralFactor", type: "uint16" }, { internalType: "uint16", name: "liquidationThreshold", type: "uint16" }, { internalType: "uint16", name: "liquidationMaxLimit", type: "uint16" }, { internalType: "uint16", name: "withdrawalGap", type: "uint16" }, { internalType: "uint16", name: "liquidationPenalty", type: "uint16" }, { internalType: "uint16", name: "borrowFee", type: "uint16" }, { internalType: "address", name: "oracle", type: "address" }, { internalType: "uint256", name: "oraclePriceOperate", type: "uint256" }, { internalType: "uint256", name: "oraclePriceLiquidate", type: "uint256" }, { internalType: "uint256", name: "priceOfSupplyToken0InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfSupplyToken1InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfBorrowToken0InUSD", type: "uint256" }, { internalType: "uint256", name: "priceOfBorrowToken1InUSD", type: "uint256" }, { internalType: "uint256", name: "vaultSupplyExchangePrice", type: "uint256" }, { internalType: "uint256", name: "vaultBorrowExchangePrice", type: "uint256" }, { internalType: "int256", name: "supplyRateVault", type: "int256" }, { internalType: "int256", name: "borrowRateVault", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateSupply", type: "int256" }, { internalType: "int256", name: "rewardsOrFeeRateBorrow", type: "int256" }, { internalType: "uint256", name: "totalPositions", type: "uint256" }, { internalType: "uint256", name: "totalSupplyVault", type: "uint256" }, { internalType: "uint256", name: "totalBorrowVault", type: "uint256" }, { internalType: "uint256", name: "withdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawable", type: "uint256" }, { internalType: "uint256", name: "baseWithdrawalLimit", type: "uint256" }, { internalType: "uint256", name: "withdrawExpandPercent", type: "uint256" }, { internalType: "uint256", name: "withdrawExpandDuration", type: "uint256" }, { internalType: "uint256", name: "borrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowableUntilLimit", type: "uint256" }, { internalType: "uint256", name: "borrowable", type: "uint256" }, { internalType: "uint256", name: "borrowLimitUtilization", type: "uint256" }, { internalType: "uint256", name: "maxBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "borrowExpandPercent", type: "uint256" }, { internalType: "uint256", name: "borrowExpandDuration", type: "uint256" }, { internalType: "uint256", name: "baseBorrowLimit", type: "uint256" }, { internalType: "uint256", name: "minimumBorrowing", type: "uint256" }], internalType: "struct FluidView.VaultData", name: "vaultData", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "int256", name: "_btcPrice", type: "int256" }], name: "getWBtcPrice", outputs: [{ internalType: "int256", name: "wBtcPrice", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "int256", name: "_stEthPrice", type: "int256" }], name: "getWStEthPrice", outputs: [{ internalType: "int256", name: "wStEthPrice", type: "int256" }], stateMutability: "view", type: "function" }];

module.exports = {
    fluidVaultResolverAbi,
    fluidVaultT1Abi,
    fluidViewAbi
};
