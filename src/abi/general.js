const botAuthAbi = [{ inputs: [{ internalType: "address", name: "_caller", type: "address" }], name: "addCaller", outputs: [], stateMutability: "nonpayable", type: "function" }];
const dfsRegistryAbi = [{ inputs: [{ internalType: "bytes4", name: "_id", type: "bytes4" }], name: "getAddr", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }];
const iProxyERC20Abi = [{ inputs: [], name: "target", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "tokenState", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }];
const erc20Abi = [{ inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { constant: false, inputs: [{ name: "_spender", type: "address" }, { name: "_value", type: "uint256" }], name: "approve", outputs: [{ name: "", type: "bool" }], payable: false, stateMutability: "nonpayable", type: "function" }, { constant: true, inputs: [{ name: "_owner", type: "address" }, { name: "_spender", type: "address" }], name: "allowance", outputs: [{ name: "", type: "uint256" }], payable: false, stateMutability: "view", type: "function" }];
const proxyRegistryAbi = [{ constant: true, inputs: [{ name: "", type: "address" }], name: "proxies", outputs: [{ name: "", type: "address" }], payable: false, stateMutability: "view", type: "function" }, { constant: false, inputs: [{ name: "owner", type: "address" }], name: "build", outputs: [{ name: "proxy", type: "address" }], payable: false, stateMutability: "nonpayable", type: "function" }];
const proxyAbi = [{ constant: false, inputs: [{ name: "_target", type: "address" }, { name: "_data", type: "bytes" }], name: "execute", outputs: [{ name: "response", type: "bytes32" }], payable: true, stateMutability: "payable", type: "function" }];
const subProxyAbi = [{ inputs: [], name: "NonContractCall", type: "error" }, { inputs: [], name: "SenderNotAdmin", type: "error" }, { inputs: [], name: "SenderNotOwner", type: "error" }, { inputs: [], name: "EXECUTE_SELECTOR", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_subId", type: "uint256" }], name: "activateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "adminVault", outputs: [{ internalType: "contract AdminVault", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_subId", type: "uint256" }], name: "deactivateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_contractAddr", type: "address" }], name: "givePermission", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "kill", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "registry", outputs: [{ internalType: "contract DFSRegistry", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_contractAddr", type: "address" }], name: "removePermission", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "_sub", type: "tuple" }], name: "subscribeToStrategy", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_subId", type: "uint256" }, { components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "_sub", type: "tuple" }], name: "updateAndActivateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_subId", type: "uint256" }, { components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "_sub", type: "tuple" }], name: "updateSubData", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_token", type: "address" }, { internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_amount", type: "uint256" }], name: "withdrawStuckFunds", outputs: [], stateMutability: "nonpayable", type: "function" }];
const subStorageAbi = [{ inputs: [], name: "NonContractCall", type: "error" }, { inputs: [], name: "SenderNotAdmin", type: "error" }, { inputs: [], name: "SenderNotOwner", type: "error" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }], name: "SenderNotSubOwnerError", type: "error" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "bool", name: "", type: "bool" }], name: "SubIdOutOfRange", type: "error" }, { inputs: [], name: "UserPositionsEmpty", type: "error" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "subId", type: "uint256" }], name: "ActivateSub", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "subId", type: "uint256" }], name: "DeactivateSub", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "subId", type: "uint256" }, { indexed: true, internalType: "address", name: "proxy", type: "address" }, { indexed: true, internalType: "bytes32", name: "subHash", type: "bytes32" }, { components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], indexed: false, internalType: "struct StrategyModel.StrategySub", name: "subStruct", type: "tuple" }], name: "Subscribe", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "subId", type: "uint256" }, { indexed: true, internalType: "bytes32", name: "subHash", type: "bytes32" }, { components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], indexed: false, internalType: "struct StrategyModel.StrategySub", name: "subStruct", type: "tuple" }], name: "UpdateData", type: "event" }, { inputs: [{ internalType: "uint256", name: "_subId", type: "uint256" }], name: "activateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "adminVault", outputs: [{ internalType: "contract AdminVault", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_subId", type: "uint256" }], name: "deactivateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_subId", type: "uint256" }], name: "getSub", outputs: [{ components: [{ internalType: "bytes20", name: "userProxy", type: "bytes20" }, { internalType: "bool", name: "isEnabled", type: "bool" }, { internalType: "bytes32", name: "strategySubHash", type: "bytes32" }], internalType: "struct StrategyModel.StoredSubData", name: "", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getSubsCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "kill", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "registry", outputs: [{ internalType: "contract DFSRegistry", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "strategiesSubs", outputs: [{ internalType: "bytes20", name: "userProxy", type: "bytes20" }, { internalType: "bool", name: "isEnabled", type: "bool" }, { internalType: "bytes32", name: "strategySubHash", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "_sub", type: "tuple" }], name: "subscribeToStrategy", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_subId", type: "uint256" }, { components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "_sub", type: "tuple" }], name: "updateSubData", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_token", type: "address" }, { internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_amount", type: "uint256" }], name: "withdrawStuckFunds", outputs: [], stateMutability: "nonpayable", type: "function" }];
const sparkSubProxyAbi = [{ inputs: [{ internalType: "uint64", name: "_repayBundleId", type: "uint64" }, { internalType: "uint64", name: "_boostBundleId", type: "uint64" }], stateMutability: "nonpayable", type: "constructor" }, { inputs: [], name: "NonContractCall", type: "error" }, { inputs: [{ internalType: "uint128", name: "ratio", type: "uint128" }, { internalType: "uint128", name: "targetRatio", type: "uint128" }], name: "RangeTooClose", type: "error" }, { inputs: [], name: "SenderNotAdmin", type: "error" }, { inputs: [], name: "SenderNotOwner", type: "error" }, { inputs: [{ internalType: "uint128", name: "minRatio", type: "uint128" }, { internalType: "uint128", name: "maxRatio", type: "uint128" }], name: "WrongSubParams", type: "error" }, { inputs: [], name: "BOOST_BUNDLE_ID", outputs: [{ internalType: "uint64", name: "", type: "uint64" }], stateMutability: "view", type: "function" }, { inputs: [], name: "EXECUTE_SELECTOR", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "view", type: "function" }, { inputs: [], name: "REPAY_BUNDLE_ID", outputs: [{ internalType: "uint64", name: "", type: "uint64" }], stateMutability: "view", type: "function" }, { inputs: [], name: "SPARK_MARKET", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes", name: "encodedInput", type: "bytes" }], name: "activateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "adminVault", outputs: [{ internalType: "contract AdminVault", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes", name: "encodedInput", type: "bytes" }], name: "deactivateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "uint128", name: "minRatio", type: "uint128" }, { internalType: "uint128", name: "maxRatio", type: "uint128" }, { internalType: "uint128", name: "targetRatioBoost", type: "uint128" }, { internalType: "uint128", name: "targetRatioRepay", type: "uint128" }, { internalType: "bool", name: "boostEnabled", type: "bool" }], internalType: "struct SparkSubProxy.SparkSubData", name: "_user", type: "tuple" }], name: "formatBoostSub", outputs: [{ components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "boostSub", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "uint128", name: "minRatio", type: "uint128" }, { internalType: "uint128", name: "maxRatio", type: "uint128" }, { internalType: "uint128", name: "targetRatioBoost", type: "uint128" }, { internalType: "uint128", name: "targetRatioRepay", type: "uint128" }, { internalType: "bool", name: "boostEnabled", type: "bool" }], internalType: "struct SparkSubProxy.SparkSubData", name: "_user", type: "tuple" }], name: "formatRepaySub", outputs: [{ components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "repaySub", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_contractAddr", type: "address" }], name: "givePermission", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "kill", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes", name: "encodedInput", type: "bytes" }], name: "parseSubData", outputs: [{ components: [{ internalType: "uint128", name: "minRatio", type: "uint128" }, { internalType: "uint128", name: "maxRatio", type: "uint128" }, { internalType: "uint128", name: "targetRatioBoost", type: "uint128" }, { internalType: "uint128", name: "targetRatioRepay", type: "uint128" }, { internalType: "bool", name: "boostEnabled", type: "bool" }], internalType: "struct SparkSubProxy.SparkSubData", name: "user", type: "tuple" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "bytes", name: "encodedInput", type: "bytes" }], name: "parseSubIds", outputs: [{ internalType: "uint32", name: "subId1", type: "uint32" }, { internalType: "uint32", name: "subId2", type: "uint32" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "address", name: "_contractAddr", type: "address" }], name: "removePermission", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes", name: "encodedInput", type: "bytes" }], name: "subToSparkAutomation", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes", name: "encodedInput", type: "bytes" }], name: "updateSubData", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_token", type: "address" }, { internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_amount", type: "uint256" }], name: "withdrawStuckFunds", outputs: [], stateMutability: "nonpayable", type: "function" }];

module.exports = {
    botAuthAbi,
    dfsRegistryAbi,
    iProxyERC20Abi,
    erc20Abi,
    proxyRegistryAbi,
    proxyAbi,
    subProxyAbi,
    subStorageAbi,
    sparkSubProxyAbi
};
