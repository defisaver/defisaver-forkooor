const getCDPsabi = [{ constant: true, inputs: [{ internalType: "address", name: "manager", type: "address" }, { internalType: "address", name: "guy", type: "address" }], name: "getCdpsAsc", outputs: [{ internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "address[]", name: "urns", type: "address[]" }, { internalType: "bytes32[]", name: "ilks", type: "bytes32[]" }], payable: false, stateMutability: "view", type: "function" }];
const mcdViewAbi = [{ inputs: [], name: "MCD_MANAGER", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "VAT_ADDRESS", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "_getProxyOwner", outputs: [{ internalType: "address", name: "userAddr", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_cdpId", type: "uint256" }], name: "getCdpInfo", outputs: [{ internalType: "address", name: "urn", type: "address" }, { internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "userAddr", type: "address" }, { internalType: "bytes32", name: "ilk", type: "bytes32" }, { internalType: "uint256", name: "collateral", type: "uint256" }, { internalType: "uint256", name: "debt", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "contract IManager", name: "_manager", type: "address" }, { internalType: "uint256", name: "_cdpId", type: "uint256" }, { internalType: "bytes32", name: "_ilk", type: "bytes32" }], name: "getCdpInfo", outputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32[]", name: "_ilks", type: "bytes32[]" }, { internalType: "address", name: "_user", type: "address" }], name: "getCropJoinCdps", outputs: [{ internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "address[]", name: "urns", type: "address[]" }, { internalType: "bytes32[]", name: "ilks", type: "bytes32[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "contract IManager", name: "_manager", type: "address" }, { internalType: "uint256", name: "_cdpId", type: "uint256" }], name: "getOwner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "_ilk", type: "bytes32" }], name: "getPrice", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_managerAddr", type: "address" }, { internalType: "uint256", name: "_vaultId", type: "uint256" }], name: "getRatio", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_mcdManager", type: "address" }, { internalType: "uint256", name: "_vaultId", type: "uint256" }], name: "getUrnAndIlk", outputs: [{ internalType: "address", name: "urn", type: "address" }, { internalType: "bytes32", name: "ilk", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_managerAddr", type: "address" }, { internalType: "uint256", name: "_vaultId", type: "uint256" }, { internalType: "bytes32", name: "_ilk", type: "bytes32" }], name: "getVaultInfo", outputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "spotter", outputs: [{ internalType: "contract ISpotter", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "vat", outputs: [{ internalType: "contract IVat", name: "", type: "address" }], stateMutability: "view", type: "function" }];
const mcdSubProxyAbi = [{ inputs: [{ internalType: "uint64", name: "_repayBundleId", type: "uint64" }, { internalType: "uint64", name: "_boostBundleId", type: "uint64" }], stateMutability: "nonpayable", type: "constructor" }, { inputs: [], name: "NonContractCall", type: "error" }, { inputs: [{ internalType: "uint256", name: "ratio", type: "uint256" }, { internalType: "uint256", name: "targetRatio", type: "uint256" }], name: "RangeTooClose", type: "error" }, { inputs: [], name: "SenderNotAdmin", type: "error" }, { inputs: [], name: "SenderNotOwner", type: "error" }, { inputs: [{ internalType: "uint256", name: "minRatio", type: "uint256" }, { internalType: "uint256", name: "maxRatio", type: "uint256" }], name: "WrongSubParams", type: "error" }, { inputs: [], name: "BOOST_BUNDLE_ID", outputs: [{ internalType: "uint64", name: "", type: "uint64" }], stateMutability: "view", type: "function" }, { inputs: [], name: "EXECUTE_SELECTOR", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "view", type: "function" }, { inputs: [], name: "LEGACY_PROXY_AUTH_ADDR", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "MCD_SUB_ADDRESS", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "REPAY_BUNDLE_ID", outputs: [{ internalType: "uint64", name: "", type: "uint64" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint32", name: "_subId1", type: "uint32" }, { internalType: "uint32", name: "_subId2", type: "uint32" }], name: "activateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "adminVault", outputs: [{ internalType: "contract AdminVault", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint32", name: "_subId1", type: "uint32" }, { internalType: "uint32", name: "_subId2", type: "uint32" }], name: "deactivateSub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "minRatio", type: "uint256" }, { internalType: "uint256", name: "maxRatio", type: "uint256" }, { internalType: "uint128", name: "targetRatioBoost", type: "uint128" }, { internalType: "uint128", name: "targetRatioRepay", type: "uint128" }, { internalType: "bool", name: "boostEnabled", type: "bool" }], internalType: "struct McdSubProxy.McdSubData", name: "_user", type: "tuple" }], name: "formatBoostSub", outputs: [{ components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "boostSub", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "minRatio", type: "uint256" }, { internalType: "uint256", name: "maxRatio", type: "uint256" }, { internalType: "uint128", name: "targetRatioBoost", type: "uint128" }, { internalType: "uint128", name: "targetRatioRepay", type: "uint128" }, { internalType: "bool", name: "boostEnabled", type: "bool" }], internalType: "struct McdSubProxy.McdSubData", name: "_user", type: "tuple" }], name: "formatRepaySub", outputs: [{ components: [{ internalType: "uint64", name: "strategyOrBundleId", type: "uint64" }, { internalType: "bool", name: "isBundle", type: "bool" }, { internalType: "bytes[]", name: "triggerData", type: "bytes[]" }, { internalType: "bytes32[]", name: "subData", type: "bytes32[]" }], internalType: "struct StrategyModel.StrategySub", name: "repaySub", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_contractAddr", type: "address" }], name: "givePermission", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "kill", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_contractAddr", type: "address" }], name: "removePermission", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "minRatio", type: "uint256" }, { internalType: "uint256", name: "maxRatio", type: "uint256" }, { internalType: "uint128", name: "targetRatioBoost", type: "uint128" }, { internalType: "uint128", name: "targetRatioRepay", type: "uint128" }, { internalType: "bool", name: "boostEnabled", type: "bool" }], internalType: "struct McdSubProxy.McdSubData", name: "_subData", type: "tuple" }, { internalType: "bool", name: "_shouldLegacyUnsub", type: "bool" }], name: "subToMcdAutomation", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint32", name: "_subId1", type: "uint32" }, { internalType: "uint32", name: "_subId2", type: "uint32" }, { components: [{ internalType: "uint256", name: "vaultId", type: "uint256" }, { internalType: "uint256", name: "minRatio", type: "uint256" }, { internalType: "uint256", name: "maxRatio", type: "uint256" }, { internalType: "uint128", name: "targetRatioBoost", type: "uint128" }, { internalType: "uint128", name: "targetRatioRepay", type: "uint128" }, { internalType: "bool", name: "boostEnabled", type: "bool" }], internalType: "struct McdSubProxy.McdSubData", name: "_subData", type: "tuple" }], name: "updateSubData", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_token", type: "address" }, { internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_amount", type: "uint256" }], name: "withdrawStuckFunds", outputs: [], stateMutability: "nonpayable", type: "function" }];

module.exports = {
    getCDPsabi,
    mcdViewAbi,
    mcdSubProxyAbi
};
